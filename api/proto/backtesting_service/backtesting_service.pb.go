// api/proto/backtesting_service.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: backtesting_service.proto

package backtesting_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BacktestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate      string   `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        string   `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	InitialCapital float64  `protobuf:"fixed64,3,opt,name=initial_capital,json=initialCapital,proto3" json:"initial_capital,omitempty"`
	Symbols        []string `protobuf:"bytes,4,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *BacktestRequest) Reset() {
	*x = BacktestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backtesting_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BacktestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktestRequest) ProtoMessage() {}

func (x *BacktestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backtesting_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktestRequest.ProtoReflect.Descriptor instead.
func (*BacktestRequest) Descriptor() ([]byte, []int) {
	return file_backtesting_service_proto_rawDescGZIP(), []int{0}
}

func (x *BacktestRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BacktestRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *BacktestRequest) GetInitialCapital() float64 {
	if x != nil {
		return x.InitialCapital
	}
	return 0
}

func (x *BacktestRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type BacktestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacktestId          string          `protobuf:"bytes,1,opt,name=backtest_id,json=backtestId,proto3" json:"backtest_id,omitempty"`
	Status              *BacktestStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	FinalPortfolioValue float64         `protobuf:"fixed64,3,opt,name=final_portfolio_value,json=finalPortfolioValue,proto3" json:"final_portfolio_value,omitempty"`
	TotalReturn         float64         `protobuf:"fixed64,4,opt,name=total_return,json=totalReturn,proto3" json:"total_return,omitempty"`
	SharpeRatio         float64         `protobuf:"fixed64,5,opt,name=sharpe_ratio,json=sharpeRatio,proto3" json:"sharpe_ratio,omitempty"`
	MaxDrawdown         float64         `protobuf:"fixed64,6,opt,name=max_drawdown,json=maxDrawdown,proto3" json:"max_drawdown,omitempty"`
	Trades              []*TradeRecord  `protobuf:"bytes,7,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *BacktestResult) Reset() {
	*x = BacktestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backtesting_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BacktestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktestResult) ProtoMessage() {}

func (x *BacktestResult) ProtoReflect() protoreflect.Message {
	mi := &file_backtesting_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktestResult.ProtoReflect.Descriptor instead.
func (*BacktestResult) Descriptor() ([]byte, []int) {
	return file_backtesting_service_proto_rawDescGZIP(), []int{1}
}

func (x *BacktestResult) GetBacktestId() string {
	if x != nil {
		return x.BacktestId
	}
	return ""
}

func (x *BacktestResult) GetStatus() *BacktestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BacktestResult) GetFinalPortfolioValue() float64 {
	if x != nil {
		return x.FinalPortfolioValue
	}
	return 0
}

func (x *BacktestResult) GetTotalReturn() float64 {
	if x != nil {
		return x.TotalReturn
	}
	return 0
}

func (x *BacktestResult) GetSharpeRatio() float64 {
	if x != nil {
		return x.SharpeRatio
	}
	return 0
}

func (x *BacktestResult) GetMaxDrawdown() float64 {
	if x != nil {
		return x.MaxDrawdown
	}
	return 0
}

func (x *BacktestResult) GetTrades() []*TradeRecord {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TradeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date     string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Symbol   string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Action   string  `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Quantity int32   `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price    float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *TradeRecord) Reset() {
	*x = TradeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backtesting_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRecord) ProtoMessage() {}

func (x *TradeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_backtesting_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRecord.ProtoReflect.Descriptor instead.
func (*TradeRecord) Descriptor() ([]byte, []int) {
	return file_backtesting_service_proto_rawDescGZIP(), []int{2}
}

func (x *TradeRecord) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TradeRecord) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeRecord) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TradeRecord) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeRecord) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type BacktestStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacktestId string `protobuf:"bytes,1,opt,name=backtest_id,json=backtestId,proto3" json:"backtest_id,omitempty"`
}

func (x *BacktestStatusRequest) Reset() {
	*x = BacktestStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backtesting_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BacktestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktestStatusRequest) ProtoMessage() {}

func (x *BacktestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backtesting_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktestStatusRequest.ProtoReflect.Descriptor instead.
func (*BacktestStatusRequest) Descriptor() ([]byte, []int) {
	return file_backtesting_service_proto_rawDescGZIP(), []int{3}
}

func (x *BacktestStatusRequest) GetBacktestId() string {
	if x != nil {
		return x.BacktestId
	}
	return ""
}

type BacktestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacktestId string  `protobuf:"bytes,1,opt,name=backtest_id,json=backtestId,proto3" json:"backtest_id,omitempty"`
	Status     string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Progress   float64 `protobuf:"fixed64,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *BacktestStatus) Reset() {
	*x = BacktestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backtesting_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BacktestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktestStatus) ProtoMessage() {}

func (x *BacktestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_backtesting_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktestStatus.ProtoReflect.Descriptor instead.
func (*BacktestStatus) Descriptor() ([]byte, []int) {
	return file_backtesting_service_proto_rawDescGZIP(), []int{4}
}

func (x *BacktestStatus) GetBacktestId() string {
	if x != nil {
		return x.BacktestId
	}
	return ""
}

func (x *BacktestStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BacktestStatus) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

var File_backtesting_service_proto protoreflect.FileDescriptor

var file_backtesting_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x22, 0xc3, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x70,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x68, 0x61, 0x72, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x37, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x15,
	0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x32, 0xd4, 0x01,
	0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d,
	0x2d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backtesting_service_proto_rawDescOnce sync.Once
	file_backtesting_service_proto_rawDescData = file_backtesting_service_proto_rawDesc
)

func file_backtesting_service_proto_rawDescGZIP() []byte {
	file_backtesting_service_proto_rawDescOnce.Do(func() {
		file_backtesting_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_backtesting_service_proto_rawDescData)
	})
	return file_backtesting_service_proto_rawDescData
}

var file_backtesting_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_backtesting_service_proto_goTypes = []any{
	(*BacktestRequest)(nil),       // 0: backtestingservice.BacktestRequest
	(*BacktestResult)(nil),        // 1: backtestingservice.BacktestResult
	(*TradeRecord)(nil),           // 2: backtestingservice.TradeRecord
	(*BacktestStatusRequest)(nil), // 3: backtestingservice.BacktestStatusRequest
	(*BacktestStatus)(nil),        // 4: backtestingservice.BacktestStatus
}
var file_backtesting_service_proto_depIdxs = []int32{
	4, // 0: backtestingservice.BacktestResult.status:type_name -> backtestingservice.BacktestStatus
	2, // 1: backtestingservice.BacktestResult.trades:type_name -> backtestingservice.TradeRecord
	0, // 2: backtestingservice.BacktestingService.RunBacktest:input_type -> backtestingservice.BacktestRequest
	3, // 3: backtestingservice.BacktestingService.GetBacktestStatus:input_type -> backtestingservice.BacktestStatusRequest
	1, // 4: backtestingservice.BacktestingService.RunBacktest:output_type -> backtestingservice.BacktestResult
	4, // 5: backtestingservice.BacktestingService.GetBacktestStatus:output_type -> backtestingservice.BacktestStatus
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_backtesting_service_proto_init() }
func file_backtesting_service_proto_init() {
	if File_backtesting_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backtesting_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BacktestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backtesting_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BacktestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backtesting_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TradeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backtesting_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BacktestStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backtesting_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BacktestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backtesting_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backtesting_service_proto_goTypes,
		DependencyIndexes: file_backtesting_service_proto_depIdxs,
		MessageInfos:      file_backtesting_service_proto_msgTypes,
	}.Build()
	File_backtesting_service_proto = out.File
	file_backtesting_service_proto_rawDesc = nil
	file_backtesting_service_proto_goTypes = nil
	file_backtesting_service_proto_depIdxs = nil
}
