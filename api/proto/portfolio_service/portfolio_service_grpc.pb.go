// api/proto/portfolio_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: portfolio_service.proto

package portfolio_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PortfolioService_GenerateOrders_FullMethodName           = "/portfolioservice.PortfolioService/GenerateOrders"
	PortfolioService_GetDesiredPortfolioState_FullMethodName = "/portfolioservice.PortfolioService/GetDesiredPortfolioState"
	PortfolioService_TriggerRebalance_FullMethodName         = "/portfolioservice.PortfolioService/TriggerRebalance"
	PortfolioService_UpdateRebalanceSchedule_FullMethodName  = "/portfolioservice.PortfolioService/UpdateRebalanceSchedule"
)

// PortfolioServiceClient is the client API for PortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioServiceClient interface {
	GenerateOrders(ctx context.Context, in *GenerateOrdersRequest, opts ...grpc.CallOption) (*GenerateOrdersResponse, error)
	GetDesiredPortfolioState(ctx context.Context, in *GetDesiredPortfolioStateRequest, opts ...grpc.CallOption) (*PortfolioState, error)
	TriggerRebalance(ctx context.Context, in *TriggerRebalanceRequest, opts ...grpc.CallOption) (*TriggerRebalanceResponse, error)
	UpdateRebalanceSchedule(ctx context.Context, in *UpdateRebalanceScheduleRequest, opts ...grpc.CallOption) (*UpdateRebalanceScheduleResponse, error)
}

type portfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioServiceClient(cc grpc.ClientConnInterface) PortfolioServiceClient {
	return &portfolioServiceClient{cc}
}

func (c *portfolioServiceClient) GenerateOrders(ctx context.Context, in *GenerateOrdersRequest, opts ...grpc.CallOption) (*GenerateOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateOrdersResponse)
	err := c.cc.Invoke(ctx, PortfolioService_GenerateOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) GetDesiredPortfolioState(ctx context.Context, in *GetDesiredPortfolioStateRequest, opts ...grpc.CallOption) (*PortfolioState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortfolioState)
	err := c.cc.Invoke(ctx, PortfolioService_GetDesiredPortfolioState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) TriggerRebalance(ctx context.Context, in *TriggerRebalanceRequest, opts ...grpc.CallOption) (*TriggerRebalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerRebalanceResponse)
	err := c.cc.Invoke(ctx, PortfolioService_TriggerRebalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpdateRebalanceSchedule(ctx context.Context, in *UpdateRebalanceScheduleRequest, opts ...grpc.CallOption) (*UpdateRebalanceScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRebalanceScheduleResponse)
	err := c.cc.Invoke(ctx, PortfolioService_UpdateRebalanceSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServiceServer is the server API for PortfolioService service.
// All implementations must embed UnimplementedPortfolioServiceServer
// for forward compatibility
type PortfolioServiceServer interface {
	GenerateOrders(context.Context, *GenerateOrdersRequest) (*GenerateOrdersResponse, error)
	GetDesiredPortfolioState(context.Context, *GetDesiredPortfolioStateRequest) (*PortfolioState, error)
	TriggerRebalance(context.Context, *TriggerRebalanceRequest) (*TriggerRebalanceResponse, error)
	UpdateRebalanceSchedule(context.Context, *UpdateRebalanceScheduleRequest) (*UpdateRebalanceScheduleResponse, error)
	mustEmbedUnimplementedPortfolioServiceServer()
}

// UnimplementedPortfolioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioServiceServer struct {
}

func (UnimplementedPortfolioServiceServer) GenerateOrders(context.Context, *GenerateOrdersRequest) (*GenerateOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOrders not implemented")
}
func (UnimplementedPortfolioServiceServer) GetDesiredPortfolioState(context.Context, *GetDesiredPortfolioStateRequest) (*PortfolioState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesiredPortfolioState not implemented")
}
func (UnimplementedPortfolioServiceServer) TriggerRebalance(context.Context, *TriggerRebalanceRequest) (*TriggerRebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRebalance not implemented")
}
func (UnimplementedPortfolioServiceServer) UpdateRebalanceSchedule(context.Context, *UpdateRebalanceScheduleRequest) (*UpdateRebalanceScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRebalanceSchedule not implemented")
}
func (UnimplementedPortfolioServiceServer) mustEmbedUnimplementedPortfolioServiceServer() {}

// UnsafePortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServiceServer will
// result in compilation errors.
type UnsafePortfolioServiceServer interface {
	mustEmbedUnimplementedPortfolioServiceServer()
}

func RegisterPortfolioServiceServer(s grpc.ServiceRegistrar, srv PortfolioServiceServer) {
	s.RegisterService(&PortfolioService_ServiceDesc, srv)
}

func _PortfolioService_GenerateOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GenerateOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GenerateOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GenerateOrders(ctx, req.(*GenerateOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_GetDesiredPortfolioState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesiredPortfolioStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).GetDesiredPortfolioState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_GetDesiredPortfolioState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).GetDesiredPortfolioState(ctx, req.(*GetDesiredPortfolioStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_TriggerRebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).TriggerRebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_TriggerRebalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).TriggerRebalance(ctx, req.(*TriggerRebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpdateRebalanceSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRebalanceScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpdateRebalanceSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_UpdateRebalanceSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpdateRebalanceSchedule(ctx, req.(*UpdateRebalanceScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioService_ServiceDesc is the grpc.ServiceDesc for PortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolioservice.PortfolioService",
	HandlerType: (*PortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateOrders",
			Handler:    _PortfolioService_GenerateOrders_Handler,
		},
		{
			MethodName: "GetDesiredPortfolioState",
			Handler:    _PortfolioService_GetDesiredPortfolioState_Handler,
		},
		{
			MethodName: "TriggerRebalance",
			Handler:    _PortfolioService_TriggerRebalance_Handler,
		},
		{
			MethodName: "UpdateRebalanceSchedule",
			Handler:    _PortfolioService_UpdateRebalanceSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portfolio_service.proto",
}
