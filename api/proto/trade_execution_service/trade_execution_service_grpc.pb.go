// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: trade_execution_service.proto

package trade_execution_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TradeExecutionService_ExecuteTrades_FullMethodName      = "/tradeexecutionservice.TradeExecutionService/ExecuteTrades"
	TradeExecutionService_GetExecutionStatus_FullMethodName = "/tradeexecutionservice.TradeExecutionService/GetExecutionStatus"
)

// TradeExecutionServiceClient is the client API for TradeExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeExecutionServiceClient interface {
	ExecuteTrades(ctx context.Context, in *ExecuteTradesRequest, opts ...grpc.CallOption) (*ExecuteTradesResponse, error)
	GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (*ExecutionStatus, error)
}

type tradeExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeExecutionServiceClient(cc grpc.ClientConnInterface) TradeExecutionServiceClient {
	return &tradeExecutionServiceClient{cc}
}

func (c *tradeExecutionServiceClient) ExecuteTrades(ctx context.Context, in *ExecuteTradesRequest, opts ...grpc.CallOption) (*ExecuteTradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTradesResponse)
	err := c.cc.Invoke(ctx, TradeExecutionService_ExecuteTrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeExecutionServiceClient) GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (*ExecutionStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutionStatus)
	err := c.cc.Invoke(ctx, TradeExecutionService_GetExecutionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeExecutionServiceServer is the server API for TradeExecutionService service.
// All implementations must embed UnimplementedTradeExecutionServiceServer
// for forward compatibility
type TradeExecutionServiceServer interface {
	ExecuteTrades(context.Context, *ExecuteTradesRequest) (*ExecuteTradesResponse, error)
	GetExecutionStatus(context.Context, *GetExecutionStatusRequest) (*ExecutionStatus, error)
	mustEmbedUnimplementedTradeExecutionServiceServer()
}

// UnimplementedTradeExecutionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeExecutionServiceServer struct {
}

func (UnimplementedTradeExecutionServiceServer) ExecuteTrades(context.Context, *ExecuteTradesRequest) (*ExecuteTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTrades not implemented")
}
func (UnimplementedTradeExecutionServiceServer) GetExecutionStatus(context.Context, *GetExecutionStatusRequest) (*ExecutionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionStatus not implemented")
}
func (UnimplementedTradeExecutionServiceServer) mustEmbedUnimplementedTradeExecutionServiceServer() {}

// UnsafeTradeExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeExecutionServiceServer will
// result in compilation errors.
type UnsafeTradeExecutionServiceServer interface {
	mustEmbedUnimplementedTradeExecutionServiceServer()
}

func RegisterTradeExecutionServiceServer(s grpc.ServiceRegistrar, srv TradeExecutionServiceServer) {
	s.RegisterService(&TradeExecutionService_ServiceDesc, srv)
}

func _TradeExecutionService_ExecuteTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeExecutionServiceServer).ExecuteTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeExecutionService_ExecuteTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeExecutionServiceServer).ExecuteTrades(ctx, req.(*ExecuteTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeExecutionService_GetExecutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeExecutionServiceServer).GetExecutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeExecutionService_GetExecutionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeExecutionServiceServer).GetExecutionStatus(ctx, req.(*GetExecutionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeExecutionService_ServiceDesc is the grpc.ServiceDesc for TradeExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tradeexecutionservice.TradeExecutionService",
	HandlerType: (*TradeExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTrades",
			Handler:    _TradeExecutionService_ExecuteTrades_Handler,
		},
		{
			MethodName: "GetExecutionStatus",
			Handler:    _TradeExecutionService_GetExecutionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trade_execution_service.proto",
}
