// api/proto/trade_execution_service.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: trade_execution_service.proto

package trade_execution_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderType int32

const (
	OrderType_MARKET OrderType = 0
	OrderType_LIMIT  OrderType = 1
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "MARKET",
		1: "LIMIT",
	}
	OrderType_value = map[string]int32{
		"MARKET": 0,
		"LIMIT":  1,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_execution_service_proto_enumTypes[0].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_trade_execution_service_proto_enumTypes[0]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_trade_execution_service_proto_rawDescGZIP(), []int{0}
}

type ExecutionStatus int32

const (
	ExecutionStatus_PENDING          ExecutionStatus = 0
	ExecutionStatus_PARTIALLY_FILLED ExecutionStatus = 1
	ExecutionStatus_FILLED           ExecutionStatus = 2
	ExecutionStatus_CANCELLED        ExecutionStatus = 3
	ExecutionStatus_REJECTED         ExecutionStatus = 4
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0: "PENDING",
		1: "PARTIALLY_FILLED",
		2: "FILLED",
		3: "CANCELLED",
		4: "REJECTED",
	}
	ExecutionStatus_value = map[string]int32{
		"PENDING":          0,
		"PARTIALLY_FILLED": 1,
		"FILLED":           2,
		"CANCELLED":        3,
		"REJECTED":         4,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_execution_service_proto_enumTypes[1].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_trade_execution_service_proto_enumTypes[1]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_execution_service_proto_rawDescGZIP(), []int{1}
}

type TradeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string    `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type       OrderType `protobuf:"varint,2,opt,name=type,proto3,enum=tradeexecutionservice.OrderType" json:"type,omitempty"`
	Quantity   int32     `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LimitPrice float64   `protobuf:"fixed64,4,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"` // Optional, for limit orders
	OrderId    string    `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *TradeOrder) Reset() {
	*x = TradeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_execution_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeOrder) ProtoMessage() {}

func (x *TradeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_execution_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeOrder.ProtoReflect.Descriptor instead.
func (*TradeOrder) Descriptor() ([]byte, []int) {
	return file_trade_execution_service_proto_rawDescGZIP(), []int{0}
}

func (x *TradeOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeOrder) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_MARKET
}

func (x *TradeOrder) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeOrder) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *TradeOrder) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type TradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          string          `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status           ExecutionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=tradeexecutionservice.ExecutionStatus" json:"status,omitempty"`
	ExecutedPrice    float64         `protobuf:"fixed64,3,opt,name=executed_price,json=executedPrice,proto3" json:"executed_price,omitempty"`
	ExecutedQuantity int32           `protobuf:"varint,4,opt,name=executed_quantity,json=executedQuantity,proto3" json:"executed_quantity,omitempty"`
	ExecutionTime    string          `protobuf:"bytes,5,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
}

func (x *TradeResult) Reset() {
	*x = TradeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_execution_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResult) ProtoMessage() {}

func (x *TradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_trade_execution_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResult.ProtoReflect.Descriptor instead.
func (*TradeResult) Descriptor() ([]byte, []int) {
	return file_trade_execution_service_proto_rawDescGZIP(), []int{1}
}

func (x *TradeResult) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TradeResult) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_PENDING
}

func (x *TradeResult) GetExecutedPrice() float64 {
	if x != nil {
		return x.ExecutedPrice
	}
	return 0
}

func (x *TradeResult) GetExecutedQuantity() int32 {
	if x != nil {
		return x.ExecutedQuantity
	}
	return 0
}

func (x *TradeResult) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

type ExecutionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *ExecutionStatusRequest) Reset() {
	*x = ExecutionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_execution_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusRequest) ProtoMessage() {}

func (x *ExecutionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_execution_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusRequest.ProtoReflect.Descriptor instead.
func (*ExecutionStatusRequest) Descriptor() ([]byte, []int) {
	return file_trade_execution_service_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutionStatusRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

var File_trade_execution_service_proto protoreflect.FileDescriptor

var file_trade_execution_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x33, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x22, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x2a, 0x5d, 0x0a, 0x0f, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0xdb, 0x01, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x75, 0x6d, 0x2d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_execution_service_proto_rawDescOnce sync.Once
	file_trade_execution_service_proto_rawDescData = file_trade_execution_service_proto_rawDesc
)

func file_trade_execution_service_proto_rawDescGZIP() []byte {
	file_trade_execution_service_proto_rawDescOnce.Do(func() {
		file_trade_execution_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_execution_service_proto_rawDescData)
	})
	return file_trade_execution_service_proto_rawDescData
}

var file_trade_execution_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_trade_execution_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_trade_execution_service_proto_goTypes = []any{
	(OrderType)(0),                 // 0: tradeexecutionservice.OrderType
	(ExecutionStatus)(0),           // 1: tradeexecutionservice.ExecutionStatus
	(*TradeOrder)(nil),             // 2: tradeexecutionservice.TradeOrder
	(*TradeResult)(nil),            // 3: tradeexecutionservice.TradeResult
	(*ExecutionStatusRequest)(nil), // 4: tradeexecutionservice.ExecutionStatusRequest
}
var file_trade_execution_service_proto_depIdxs = []int32{
	0, // 0: tradeexecutionservice.TradeOrder.type:type_name -> tradeexecutionservice.OrderType
	1, // 1: tradeexecutionservice.TradeResult.status:type_name -> tradeexecutionservice.ExecutionStatus
	2, // 2: tradeexecutionservice.TradeExecutionService.ExecuteTrade:input_type -> tradeexecutionservice.TradeOrder
	4, // 3: tradeexecutionservice.TradeExecutionService.GetExecutionStatus:input_type -> tradeexecutionservice.ExecutionStatusRequest
	3, // 4: tradeexecutionservice.TradeExecutionService.ExecuteTrade:output_type -> tradeexecutionservice.TradeResult
	3, // 5: tradeexecutionservice.TradeExecutionService.GetExecutionStatus:output_type -> tradeexecutionservice.TradeResult
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_trade_execution_service_proto_init() }
func file_trade_execution_service_proto_init() {
	if File_trade_execution_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_execution_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TradeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_execution_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TradeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_execution_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_execution_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trade_execution_service_proto_goTypes,
		DependencyIndexes: file_trade_execution_service_proto_depIdxs,
		EnumInfos:         file_trade_execution_service_proto_enumTypes,
		MessageInfos:      file_trade_execution_service_proto_msgTypes,
	}.Build()
	File_trade_execution_service_proto = out.File
	file_trade_execution_service_proto_rawDesc = nil
	file_trade_execution_service_proto_goTypes = nil
	file_trade_execution_service_proto_depIdxs = nil
}
